#!/usr/bin/env python2

""" S2F recipe generation. """

import argparse
import logging
import numpy as np
import yaml

import bluepy

from bluerecipe.s2f import generate_recipe, verify_recipe, write_recipe
from bluerecipe.version import __version__


def load_yaml(filepath):
    with open(filepath) as f:
        return yaml.load(f)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="S2F recipe generation")
    parser.add_argument(
        "-s", "--strategies",
        help="Path to strategies config",
        required=True
    )
    parser.add_argument(
        "-o", "--output",
        help="Path to output file",
        required=True
    )
    parser.add_argument(
        "--strict",
        action="store_true",
        help="Fail if recipe is incomplete",
        default=False
    )
    parser.add_argument(
        "--seed",
        type=int,
        help="Random generator seed",
    )
    parser.add_argument(
        "-v", "--verbose",
        action='count',
        help="Log verbosity level",
        default=0
    )
    parser.add_argument(
        "circuit",
        help="Path to CircuitConfig",
        nargs=1
    )
    args = parser.parse_args()

    logging.basicConfig(level=logging.WARN)
    logging.getLogger('s2f_recipe').setLevel({
        0: logging.WARN,
        1: logging.INFO,
        2: logging.DEBUG,
    }[args.verbose])

    circuit = bluepy.Circuit(args.circuit[0])
    strategies = load_yaml(args.strategies)

    comment = (
        "\nGenerated by bluerecipe==%s" % __version__ +
        "\nfrom circuit %s" % args.circuit[0] +
        "\nusing strategies:" +
        "\n" + yaml.dump(strategies)
    )

    if args.seed is not None:
        np.random.seed(args.seed)
        comment += "seed=%d\n" % args.seed

    recipe = generate_recipe(circuit, strategies)
    if args.strict:
        verify_recipe(circuit, recipe)
    write_recipe(args.output, recipe, comment=comment)
