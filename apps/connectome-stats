#!/usr/bin/env python2

""" Connectome statistics. """

import click
import itertools
import logging
import numpy as np

import bluepy
from bluepy.v2.enums import Cell


L = logging.getLogger(__name__)

NA_VALUE = "N/A"


def _format_sample(sample, short=False):
    """ Get string representation for sample and its mean / std / size. """
    ftoa = lambda x: "%.3g" % x
    size = len(sample)
    if size > 0:
        if short:
            values = NA_VALUE
        else:
            values = ",".join(map(ftoa, np.sort(sample)))
        return ftoa(np.mean(sample)), ftoa(np.std(sample)), str(size), values
    else:
        return NA_VALUE, NA_VALUE, NA_VALUE, NA_VALUE


@click.group()
@click.option("--seed", type=int, default=0, help="Random generator seed", show_default=True)
def app(seed):
    """ Calculate some connectome statistics. """
    logging.basicConfig(level=logging.WARN)
    np.random.seed(seed)


@app.command()
@click.argument("circuit")
@click.option("-n", "--sample-size", type=int, default=100, help="Sample size", show_default=True)
@click.option("--short", is_flag=True, default=False, help="Omit sampled values", show_default=True)
def nsyn_per_connection(circuit, sample_size, short):
    """Mean connection synapse count per pathway"""
    circuit = bluepy.Circuit(circuit).v2
    mtypes = sorted(circuit.cells.mtypes)

    click.echo("\t".join(['from', 'to', 'mean', 'std', 'size', 'sample']))

    for pre, post in itertools.product(mtypes, mtypes):
        pre_group = {Cell.MTYPE: pre}
        post_group = {Cell.MTYPE: post}
        sample = circuit.stats.sample_pathway_synapse_count(
            n=sample_size, pre=pre_group, post=post_group
        )
        mean, std, size, values = _format_sample(sample, short)
        click.echo("\t".join([pre, post, mean, std, size, values]))


@app.command()
@click.argument("circuit")
@click.option("-n", "--sample-size", type=int, default=100, help="Sample size", show_default=True)
@click.option("-t", "--sample-target", default=None, help="Sample target", show_default=True)
@click.option(
    "--assume-syns-bouton", type=float, default=1.0,
    help="Synapse count per bouton", show_default=True
)
@click.option("--short", is_flag=True, default=False, help="Omit sampled values", show_default=True)
def bouton_density(circuit, sample_size, sample_target, assume_syns_bouton, short):
    """ Mean bouton density per mtype """
    circuit = bluepy.Circuit(circuit).v2
    mtypes = sorted(circuit.cells.mtypes)

    click.echo("\t".join(['mtype', 'mean', 'std', 'size', 'sample']))

    for mtype in itertools.chain(['*'], mtypes):
        if mtype == '*':
            group = {}
        else:
            group = {Cell.MTYPE: mtype}
        if sample_target is not None:
            group['$target'] = sample_target
        sample = circuit.stats.sample_bouton_density(
            n=sample_size, group=group, synapses_per_bouton=assume_syns_bouton
        )
        mean, std, size, values = _format_sample(sample, short)
        click.echo("\t".join([mtype, mean, std, size, values]))


if __name__ == '__main__':
    app(None)
